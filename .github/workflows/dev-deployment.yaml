name:  Dev deployment
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REPO_NAME: ${{ github.event.repository.name }}
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: "dev-k8s"
  ENVIRONMENT: "dev"
  ECR_REPOSITORY: "nginx"
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_PIPELINE_ROLE: ${{ secrets.AWS_PIPELINE_ROLE }}
  AWS_REGISTRY_URL: ${{ secrets.AWS_REGISTRY_URL }}

jobs:
  build-image:
    permissions:
      id-token: write
      contents: read
    environment: dev
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup helmfile
      uses: mamezou-tech/setup-helmfile@v0.8.0
    - name: Configure AWS
      run: |
        export AWS_ROLE_ARN=$AWS_PIPELINE_ROLE
        export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
        curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

    - run: aws sts get-caller-identity
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_REGISTRY_URL}
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t $AWS_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $AWS_REGISTRY_URL/$ECR_REPOSITORY:$IMAGE_TAG
    - name: Kubernetes deployment
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME
        IMAGE_TAG=${IMAGE_TAG} helmfile -e ${ENVIRONMENT} -f helm/nginx/helmfile.yaml apply
